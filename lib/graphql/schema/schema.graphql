scalar JSON

schema {
  query: Query
  mutation: Mutation
}

directive @cacheControl(
  maxAge: Int
  scope: CacheControlScope
  inheritMaxAge: Boolean
) on FIELD_DEFINITION | OBJECT | INTERFACE | UNION

type Query {
  users: [User]
  categories(
    filter: CategoryFilter
    limit: Int = 10
    number_page: Int = 1
  ): CategorySearchResult
  components(limit: Int = 10, numberPage: Int = 1): [Component]
  products(
    filter: ProductFilter
    limit: Int = 10
    number_page: Int = 1
  ): ProductSearchResult
  cart(cartId: String): Cart
}

type Mutation {
  cart: MutationCart
}

type MutationCart {
  addItem(input: AddCartItemInput!): DefaultResponse
  updateItem(input: UpdateCartItemInput!): DefaultResponse
  deleteItem(input: DeleteCartItemInput!): DefaultResponse
  addShippingAddress(input: ShippingAddressInput!): DefaultResponse
  updateShippingAddress(input: ShippingAddressInput!): DefaultResponse
  deleteShippingAddress: DefaultResponse
  updatePersonalData(input: UpdatePersonalDataInput): DefaultResponse
  placeOrder(input: PlaceOrderInput!): PlaceOrderResponse
}

input AddCartItemInput {
  amount: Float!
  variantId: String!
  qty: Int!
  componentIds: [String]
}

input UpdateCartItemInput {
  itemId: String!
  qty: Int!
}

input DeleteCartItemInput {
  itemId: String!
}

input ShippingAddressInput {
  firstname: String!
  lastname: String!
  email: String!
  phone: String!
  country: String!
  city: String!
  state: String
  street: String!
  postcode: String!
}

input UpdatePersonalDataInput {
  firstname: String!
  lastname: String!
  email: String!
  phone: String!
}

input CategoryFilter {
  query: String
}

input ProductFilter {
  ids: [String]
  query: String
  available: Boolean
  new: Boolean
  components: [String]
  minPrice: Float
  maxPrice: Float
}

input PlaceOrderInput {
  taxAmount: Float
  shippingAmount: Float
  summaryAmount: Float
}

type CategorySearchResult {
  items: [Category]
  page_info: SearchResultPageInfo
  total_count: Int
}

type ProductSearchResult {
  items: [Product]
  page_info: SearchResultPageInfo
  total_count: Int
}

type SearchResult {
  page_info: SearchResultPageInfo
  total_count: Int
}

type SearchResultPageInfo {
  "Specifies which page of results to return"
  current_page: Int
  "Specifies the maximum number of items to return"
  page_size: Int
  "Total pages"
  total_pages: Int
}

type Category {
  id: ID!
  name: String
  products(
    filter: ProductFilter
    limit: Int = 10
    number_page: Int = 1
  ): ProductSearchResult @cacheControl(maxAge: 60, scope: PUBLIC)
}

type Product {
  id: ID!
  name: String
  type: ProductType
  image: String
  new: Boolean
  available: Boolean
  components: [Component]
  variants: [Variant]
}

type Component {
  id: ID!
  name: String
  price: Float
  image: String
  products: [Product]
  productItems: [ProductItem]
}

type Variant {
  id: ID!
  price: Float
  data: JSON
  image: String
}

type User {
  id: String
  name: String
  email: String
}
type ProductItem {
  id: String!
  variant: Variant!
  components: [Component]
  cartItems: [CartItem]
  data: JSON
}

type Cart {
  id: String!
  userId: String
  user: User
  totalAmount: Float!
  qty: Int!
  firstname: String
  lastname: String
  phone: String
  email: String
  status: CartStatus

  cartItems: [CartItem]
  shippingAddress: ShippingAddress
  billingAddress: BillingAddress
}

type CartItem {
  id: String!
  cartId: String!
  name: String!
  productItem: ProductItem!
  qty: Int!
  totalAmount: Float!
}

type ShippingAddress implements Address {
  id: String
  email: String
  firstname: String
  lastname: String
  street: String
  city: String
  postcode: String
  country: String
  state: String
  phone: String
}

type BillingAddress implements Address {
  id: String
  email: String
  firstname: String
  lastname: String
  street: String
  city: String
  postcode: String
  country: String
  state: String
  phone: String
}

type PlaceOrderResponse {
  url: String
}

type DefaultResponse {
  success: Boolean!
}

interface Address {
  id: String
  email: String
  firstname: String
  lastname: String
  street: String
  city: String
  postcode: String
  country: String
  state: String
  phone: String
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}

enum PaymentType {
  STRIPE
}

enum ProductType {
  SIMPLE
  PIZZA
}

enum UserType {
  ENABLED
  DISABLED
}

enum CartStatus {
  ACTIVE
  NOT_ACTIVE
}

enum SupportPlan {
  PRO
  FREE
}

enum SocialType {
  TELEGRAM
}

enum DeliveryStatus {
  PENDING
  DELIVERED
  FAILED
}
